// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/customer.dart';
import 'models/order.dart';
import 'models/order_status.dart';
import 'models/terminals.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 8619516910133107737),
      name: 'Customer',
      lastPropertyId: const IdUid(4, 616016896979766167),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6801889756641705086),
            name: 'cId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4599324437995865890),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2575838619834289619),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 616016896979766167),
            name: 'phone',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 135028551281165955),
      name: 'Terminals',
      lastPropertyId: const IdUid(3, 6062476513322378053),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8551996614833550299),
            name: 'tId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6227792049006403338),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6062476513322378053),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 1846751678898275623),
      name: 'OrderStatus',
      lastPropertyId: const IdUid(3, 2094901791835261984),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 786840397266920362),
            name: 'osId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8266593758222525160),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2094901791835261984),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 8938918269802989134),
      name: 'OrderModel',
      lastPropertyId: const IdUid(12, 840164195621845206),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6685362917590658499),
            name: 'oId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4764357116416772482),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1290841174320871070),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1643304251919963795),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5466737264095854493),
            name: 'to_lat',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4697113116362280261),
            name: 'to_lon',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2220628863310541438),
            name: 'order_number',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3463541009649801615),
            name: 'order_price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2053130246302463334),
            name: 'delivery_price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1766346521000078553),
            name: 'delivery_address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8095690817807058778),
            name: 'delivery_comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 840164195621845206),
            name: 'created_at',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 8938918269802989134),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [1863924414234841213],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        2644272314132256799,
        5195995904683270951,
        5665188339763281843,
        670938261679094489,
        4661653812920702588,
        8247987230190835116,
        4032052936787801220,
        3909389925653241792,
        564995292937529856,
        4052066614249312864,
        2219328941636834940,
        4593010863572601325
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Customer: EntityDefinition<Customer>(
        model: _entities[0],
        toOneRelations: (Customer object) => [],
        toManyRelations: (Customer object) => {},
        getId: (Customer object) => object.cId,
        setId: (Customer object, int id) {
          object.cId = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final phoneOffset = fbb.writeString(object.phone);
          fbb.startTable(5);
          fbb.addInt64(0, object.cId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.finish(fbb.endTable());
          return object.cId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Customer(
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..cId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Terminals: EntityDefinition<Terminals>(
        model: _entities[1],
        toOneRelations: (Terminals object) => [],
        toManyRelations: (Terminals object) => {},
        getId: (Terminals object) => object.tId,
        setId: (Terminals object, int id) {
          object.tId = id;
        },
        objectToFB: (Terminals object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.tId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.tId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Terminals(
              tId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    OrderStatus: EntityDefinition<OrderStatus>(
        model: _entities[2],
        toOneRelations: (OrderStatus object) => [],
        toManyRelations: (OrderStatus object) => {},
        getId: (OrderStatus object) => object.osId,
        setId: (OrderStatus object, int id) {
          object.osId = id;
        },
        objectToFB: (OrderStatus object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.osId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.osId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrderStatus(
              osId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    OrderModel: EntityDefinition<OrderModel>(
        model: _entities[3],
        toOneRelations: (OrderModel object) => [],
        toManyRelations: (OrderModel object) => {},
        getId: (OrderModel object) => object.oId,
        setId: (OrderModel object, int id) {
          object.oId = id;
        },
        objectToFB: (OrderModel object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final statusOffset = fbb.writeString(object.status);
          final delivery_addressOffset = object.delivery_address == null
              ? null
              : fbb.writeString(object.delivery_address!);
          final delivery_commentOffset = object.delivery_comment == null
              ? null
              : fbb.writeString(object.delivery_comment!);
          fbb.startTable(13);
          fbb.addInt64(0, object.oId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, statusOffset);
          fbb.addInt64(4, object.to_lat);
          fbb.addInt64(5, object.to_lon);
          fbb.addInt64(6, object.order_number);
          fbb.addInt64(7, object.order_price);
          fbb.addInt64(8, object.delivery_price);
          fbb.addOffset(9, delivery_addressOffset);
          fbb.addOffset(10, delivery_commentOffset);
          fbb.addInt64(11, object.created_at.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.oId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrderModel(
              oId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              to_lat:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              to_lon:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              order_number:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              order_price:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              delivery_price: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 20),
              delivery_address: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              delivery_comment: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24),
              created_at: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.cId]
  static final cId = QueryIntegerProperty<Customer>(_entities[0].properties[0]);

  /// see [Customer.id]
  static final id = QueryStringProperty<Customer>(_entities[0].properties[1]);

  /// see [Customer.name]
  static final name = QueryStringProperty<Customer>(_entities[0].properties[2]);

  /// see [Customer.phone]
  static final phone =
      QueryStringProperty<Customer>(_entities[0].properties[3]);
}

/// [Terminals] entity fields to define ObjectBox queries.
class Terminals_ {
  /// see [Terminals.tId]
  static final tId =
      QueryIntegerProperty<Terminals>(_entities[1].properties[0]);

  /// see [Terminals.id]
  static final id = QueryStringProperty<Terminals>(_entities[1].properties[1]);

  /// see [Terminals.name]
  static final name =
      QueryStringProperty<Terminals>(_entities[1].properties[2]);
}

/// [OrderStatus] entity fields to define ObjectBox queries.
class OrderStatus_ {
  /// see [OrderStatus.osId]
  static final osId =
      QueryIntegerProperty<OrderStatus>(_entities[2].properties[0]);

  /// see [OrderStatus.id]
  static final id =
      QueryStringProperty<OrderStatus>(_entities[2].properties[1]);

  /// see [OrderStatus.name]
  static final name =
      QueryStringProperty<OrderStatus>(_entities[2].properties[2]);
}

/// [OrderModel] entity fields to define ObjectBox queries.
class OrderModel_ {
  /// see [OrderModel.oId]
  static final oId =
      QueryIntegerProperty<OrderModel>(_entities[3].properties[0]);

  /// see [OrderModel.id]
  static final id = QueryStringProperty<OrderModel>(_entities[3].properties[1]);

  /// see [OrderModel.name]
  static final name =
      QueryStringProperty<OrderModel>(_entities[3].properties[2]);

  /// see [OrderModel.status]
  static final status =
      QueryStringProperty<OrderModel>(_entities[3].properties[3]);

  /// see [OrderModel.to_lat]
  static final to_lat =
      QueryIntegerProperty<OrderModel>(_entities[3].properties[4]);

  /// see [OrderModel.to_lon]
  static final to_lon =
      QueryIntegerProperty<OrderModel>(_entities[3].properties[5]);

  /// see [OrderModel.order_number]
  static final order_number =
      QueryIntegerProperty<OrderModel>(_entities[3].properties[6]);

  /// see [OrderModel.order_price]
  static final order_price =
      QueryIntegerProperty<OrderModel>(_entities[3].properties[7]);

  /// see [OrderModel.delivery_price]
  static final delivery_price =
      QueryIntegerProperty<OrderModel>(_entities[3].properties[8]);

  /// see [OrderModel.delivery_address]
  static final delivery_address =
      QueryStringProperty<OrderModel>(_entities[3].properties[9]);

  /// see [OrderModel.delivery_comment]
  static final delivery_comment =
      QueryStringProperty<OrderModel>(_entities[3].properties[10]);

  /// see [OrderModel.created_at]
  static final created_at =
      QueryIntegerProperty<OrderModel>(_entities[3].properties[11]);
}
