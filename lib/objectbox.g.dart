// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/customer.dart';
import 'models/order.dart';
import 'models/order_next_button.dart';
import 'models/order_status.dart';
import 'models/terminals.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(5, 8938918269802989134),
      name: 'OrderModel',
      lastPropertyId: const IdUid(17, 7913170474316076287),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(2, 4764357116416772482),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(5, 5466737264095854493),
            name: 'to_lat',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4697113116362280261),
            name: 'to_lon',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2220628863310541438),
            name: 'order_number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3463541009649801615),
            name: 'order_price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2053130246302463334),
            name: 'delivery_price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1766346521000078553),
            name: 'delivery_address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8095690817807058778),
            name: 'delivery_comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 840164195621845206),
            name: 'created_at',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4233819846249036246),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(3, 7570389727441659977)),
        ModelProperty(
            id: const IdUid(14, 4199781037572021773),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 4078823414943240754),
            relationTarget: 'Customer'),
        ModelProperty(
            id: const IdUid(15, 2809260946128085365),
            name: 'terminalId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 4120201620197913261),
            relationTarget: 'Terminals'),
        ModelProperty(
            id: const IdUid(16, 3357979323474007785),
            name: 'orderStatusId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 7166992057764112272),
            relationTarget: 'OrderStatus'),
        ModelProperty(
            id: const IdUid(17, 7913170474316076287),
            name: 'pre_distance',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 7323319968490159901),
            name: 'orderNextButton',
            targetId: const IdUid(9, 3885740093415193842))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 9091961325872571771),
      name: 'Terminals',
      lastPropertyId: const IdUid(4, 3920934876080503761),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(2, 840822925344105162),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 2210336822924642268),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3920934876080503761),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 1676434599599334635))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 8563256737949417726),
      name: 'OrderStatus',
      lastPropertyId: const IdUid(3, 8962048234501600838),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2828808062281907829),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4459246252108730740),
            name: 'identity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8962048234501600838),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 6192037116325498403),
      name: 'Customer',
      lastPropertyId: const IdUid(5, 3090020386679110062),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(2, 897756238628117785),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 7094149867248436284),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1001685769562708279),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3090020386679110062),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(2, 1130095198174930973))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 3885740093415193842),
      name: 'OrderNextButton',
      lastPropertyId: const IdUid(9, 6087142303395005860),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 884935736184302183),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 589923553981987948),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(7, 7968099699081636885)),
        ModelProperty(
            id: const IdUid(3, 1836023034390262135),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4037992427263734469),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3902532852745225948),
            name: 'sort',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2046563212734404928),
            name: 'finish',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 950248480076907380),
            name: 'cancel',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1065756737884964156),
            name: 'waiting',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(9, 3885740093415193842),
      lastIndexId: const IdUid(8, 4921986240989773902),
      lastRelationId: const IdUid(1, 7323319968490159901),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        1863924414234841213,
        8619516910133107737,
        135028551281165955,
        1846751678898275623
      ],
      retiredIndexUids: const [4921986240989773902],
      retiredPropertyUids: const [
        2644272314132256799,
        5195995904683270951,
        5665188339763281843,
        670938261679094489,
        4661653812920702588,
        8247987230190835116,
        4032052936787801220,
        3909389925653241792,
        564995292937529856,
        4052066614249312864,
        2219328941636834940,
        4593010863572601325,
        6801889756641705086,
        4599324437995865890,
        2575838619834289619,
        616016896979766167,
        8551996614833550299,
        6227792049006403338,
        6062476513322378053,
        786840397266920362,
        8266593758222525160,
        2094901791835261984,
        8945765911252574506,
        8107958439781220600,
        6685362917590658499,
        1290841174320871070,
        1643304251919963795,
        6087142303395005860
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    OrderModel: EntityDefinition<OrderModel>(
        model: _entities[0],
        toOneRelations: (OrderModel object) =>
            [object.customer, object.terminal, object.orderStatus],
        toManyRelations: (OrderModel object) =>
            {RelInfo<OrderModel>.toMany(1, object.id): object.orderNextButton},
        getId: (OrderModel object) => object.id,
        setId: (OrderModel object, int id) {
          object.id = id;
        },
        objectToFB: (OrderModel object, fb.Builder fbb) {
          final order_numberOffset = fbb.writeString(object.order_number);
          final delivery_addressOffset = object.delivery_address == null
              ? null
              : fbb.writeString(object.delivery_address!);
          final delivery_commentOffset = object.delivery_comment == null
              ? null
              : fbb.writeString(object.delivery_comment!);
          final identityOffset = fbb.writeString(object.identity);
          fbb.startTable(18);
          fbb.addInt64(1, object.id);
          fbb.addFloat64(4, object.to_lat);
          fbb.addFloat64(5, object.to_lon);
          fbb.addOffset(6, order_numberOffset);
          fbb.addInt64(7, object.order_price);
          fbb.addInt64(8, object.delivery_price);
          fbb.addOffset(9, delivery_addressOffset);
          fbb.addOffset(10, delivery_commentOffset);
          fbb.addInt64(11, object.created_at.millisecondsSinceEpoch);
          fbb.addOffset(12, identityOffset);
          fbb.addInt64(13, object.customer.targetId);
          fbb.addInt64(14, object.terminal.targetId);
          fbb.addInt64(15, object.orderStatus.targetId);
          fbb.addInt64(16, object.pre_distance);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrderModel(
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, ''),
              to_lat:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              to_lon:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0),
              pre_distance:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0),
              order_number: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              order_price:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              delivery_price: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 20),
              delivery_address: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              delivery_comment: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24),
              created_at:
                  DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.customer.attach(store);
          object.terminal.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.terminal.attach(store);
          object.orderStatus.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.orderStatus.attach(store);
          InternalToManyAccess.setRelInfo(
              object.orderNextButton,
              store,
              RelInfo<OrderModel>.toMany(1, object.id),
              store.box<OrderModel>());
          return object;
        }),
    Terminals: EntityDefinition<Terminals>(
        model: _entities[1],
        toOneRelations: (Terminals object) => [],
        toManyRelations: (Terminals object) => {},
        getId: (Terminals object) => object.id,
        setId: (Terminals object, int id) {
          object.id = id;
        },
        objectToFB: (Terminals object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final identityOffset = fbb.writeString(object.identity);
          fbb.startTable(5);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, identityOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Terminals(
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);

          return object;
        }),
    OrderStatus: EntityDefinition<OrderStatus>(
        model: _entities[2],
        toOneRelations: (OrderStatus object) => [],
        toManyRelations: (OrderStatus object) => {},
        getId: (OrderStatus object) => object.id,
        setId: (OrderStatus object, int id) {
          object.id = id;
        },
        objectToFB: (OrderStatus object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrderStatus(
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Customer: EntityDefinition<Customer>(
        model: _entities[3],
        toOneRelations: (Customer object) => [],
        toManyRelations: (Customer object) => {},
        getId: (Customer object) => object.id,
        setId: (Customer object, int id) {
          object.id = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final phoneOffset = fbb.writeString(object.phone);
          final identityOffset = fbb.writeString(object.identity);
          fbb.startTable(6);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, identityOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Customer(
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);

          return object;
        }),
    OrderNextButton: EntityDefinition<OrderNextButton>(
        model: _entities[4],
        toOneRelations: (OrderNextButton object) => [],
        toManyRelations: (OrderNextButton object) => {},
        getId: (OrderNextButton object) => object.id,
        setId: (OrderNextButton object, int id) {
          object.id = id;
        },
        objectToFB: (OrderNextButton object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final nameOffset = fbb.writeString(object.name);
          final colorOffset =
              object.color == null ? null : fbb.writeString(object.color!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, colorOffset);
          fbb.addInt64(4, object.sort);
          fbb.addBool(5, object.finish);
          fbb.addBool(6, object.cancel);
          fbb.addBool(7, object.waiting);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrderNextButton(
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              color: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              sort: const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              finish: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              cancel: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false),
              waiting: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [OrderModel] entity fields to define ObjectBox queries.
class OrderModel_ {
  /// see [OrderModel.id]
  static final id =
      QueryIntegerProperty<OrderModel>(_entities[0].properties[0]);

  /// see [OrderModel.to_lat]
  static final to_lat =
      QueryDoubleProperty<OrderModel>(_entities[0].properties[1]);

  /// see [OrderModel.to_lon]
  static final to_lon =
      QueryDoubleProperty<OrderModel>(_entities[0].properties[2]);

  /// see [OrderModel.order_number]
  static final order_number =
      QueryStringProperty<OrderModel>(_entities[0].properties[3]);

  /// see [OrderModel.order_price]
  static final order_price =
      QueryIntegerProperty<OrderModel>(_entities[0].properties[4]);

  /// see [OrderModel.delivery_price]
  static final delivery_price =
      QueryIntegerProperty<OrderModel>(_entities[0].properties[5]);

  /// see [OrderModel.delivery_address]
  static final delivery_address =
      QueryStringProperty<OrderModel>(_entities[0].properties[6]);

  /// see [OrderModel.delivery_comment]
  static final delivery_comment =
      QueryStringProperty<OrderModel>(_entities[0].properties[7]);

  /// see [OrderModel.created_at]
  static final created_at =
      QueryIntegerProperty<OrderModel>(_entities[0].properties[8]);

  /// see [OrderModel.identity]
  static final identity =
      QueryStringProperty<OrderModel>(_entities[0].properties[9]);

  /// see [OrderModel.customer]
  static final customer =
      QueryRelationToOne<OrderModel, Customer>(_entities[0].properties[10]);

  /// see [OrderModel.terminal]
  static final terminal =
      QueryRelationToOne<OrderModel, Terminals>(_entities[0].properties[11]);

  /// see [OrderModel.orderStatus]
  static final orderStatus =
      QueryRelationToOne<OrderModel, OrderStatus>(_entities[0].properties[12]);

  /// see [OrderModel.pre_distance]
  static final pre_distance =
      QueryIntegerProperty<OrderModel>(_entities[0].properties[13]);

  /// see [OrderModel.orderNextButton]
  static final orderNextButton =
      QueryRelationToMany<OrderModel, OrderNextButton>(
          _entities[0].relations[0]);
}

/// [Terminals] entity fields to define ObjectBox queries.
class Terminals_ {
  /// see [Terminals.id]
  static final id = QueryIntegerProperty<Terminals>(_entities[1].properties[0]);

  /// see [Terminals.name]
  static final name =
      QueryStringProperty<Terminals>(_entities[1].properties[1]);

  /// see [Terminals.identity]
  static final identity =
      QueryStringProperty<Terminals>(_entities[1].properties[2]);
}

/// [OrderStatus] entity fields to define ObjectBox queries.
class OrderStatus_ {
  /// see [OrderStatus.id]
  static final id =
      QueryIntegerProperty<OrderStatus>(_entities[2].properties[0]);

  /// see [OrderStatus.identity]
  static final identity =
      QueryStringProperty<OrderStatus>(_entities[2].properties[1]);

  /// see [OrderStatus.name]
  static final name =
      QueryStringProperty<OrderStatus>(_entities[2].properties[2]);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.id]
  static final id = QueryIntegerProperty<Customer>(_entities[3].properties[0]);

  /// see [Customer.name]
  static final name = QueryStringProperty<Customer>(_entities[3].properties[1]);

  /// see [Customer.phone]
  static final phone =
      QueryStringProperty<Customer>(_entities[3].properties[2]);

  /// see [Customer.identity]
  static final identity =
      QueryStringProperty<Customer>(_entities[3].properties[3]);
}

/// [OrderNextButton] entity fields to define ObjectBox queries.
class OrderNextButton_ {
  /// see [OrderNextButton.id]
  static final id =
      QueryIntegerProperty<OrderNextButton>(_entities[4].properties[0]);

  /// see [OrderNextButton.identity]
  static final identity =
      QueryStringProperty<OrderNextButton>(_entities[4].properties[1]);

  /// see [OrderNextButton.name]
  static final name =
      QueryStringProperty<OrderNextButton>(_entities[4].properties[2]);

  /// see [OrderNextButton.color]
  static final color =
      QueryStringProperty<OrderNextButton>(_entities[4].properties[3]);

  /// see [OrderNextButton.sort]
  static final sort =
      QueryIntegerProperty<OrderNextButton>(_entities[4].properties[4]);

  /// see [OrderNextButton.finish]
  static final finish =
      QueryBooleanProperty<OrderNextButton>(_entities[4].properties[5]);

  /// see [OrderNextButton.cancel]
  static final cancel =
      QueryBooleanProperty<OrderNextButton>(_entities[4].properties[6]);

  /// see [OrderNextButton.waiting]
  static final waiting =
      QueryBooleanProperty<OrderNextButton>(_entities[4].properties[7]);
}
