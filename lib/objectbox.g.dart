// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/couriers.dart';
import 'models/customer.dart';
import 'models/manager_couriers_model.dart';
import 'models/order.dart';
import 'models/order_next_button.dart';
import 'models/order_status.dart';
import 'models/organizations.dart';
import 'models/terminals.dart';
import 'models/waiting_order.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(5, 8938918269802989134),
      name: 'OrderModel',
      lastPropertyId: const IdUid(21, 8626749551733128580),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(2, 4764357116416772482),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(5, 5466737264095854493),
            name: 'to_lat',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4697113116362280261),
            name: 'to_lon',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2220628863310541438),
            name: 'order_number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3463541009649801615),
            name: 'order_price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2053130246302463334),
            name: 'delivery_price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1766346521000078553),
            name: 'delivery_address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8095690817807058778),
            name: 'delivery_comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 840164195621845206),
            name: 'created_at',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4233819846249036246),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(3, 7570389727441659977)),
        ModelProperty(
            id: const IdUid(14, 4199781037572021773),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 4078823414943240754),
            relationTarget: 'Customer'),
        ModelProperty(
            id: const IdUid(15, 2809260946128085365),
            name: 'terminalId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 4120201620197913261),
            relationTarget: 'Terminals'),
        ModelProperty(
            id: const IdUid(16, 3357979323474007785),
            name: 'orderStatusId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 7166992057764112272),
            relationTarget: 'OrderStatus'),
        ModelProperty(
            id: const IdUid(17, 7913170474316076287),
            name: 'pre_distance',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 6400841373942310655),
            name: 'from_lat',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 6887866108329889092),
            name: 'from_lon',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 8573742609611702437),
            name: 'organizationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(15, 4088320079207736974),
            relationTarget: 'Organizations'),
        ModelProperty(
            id: const IdUid(21, 8626749551733128580),
            name: 'courierId',
            type: 11,
            flags: 520,
            indexId: const IdUid(18, 4634025665218089564),
            relationTarget: 'Couriers')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 7323319968490159901),
            name: 'orderNextButton',
            targetId: const IdUid(9, 3885740093415193842))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 9091961325872571771),
      name: 'Terminals',
      lastPropertyId: const IdUid(4, 3920934876080503761),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(2, 840822925344105162),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 2210336822924642268),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3920934876080503761),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 1676434599599334635))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 8563256737949417726),
      name: 'OrderStatus',
      lastPropertyId: const IdUid(5, 1953990034282549854),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2828808062281907829),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4459246252108730740),
            name: 'identity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8962048234501600838),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 637348538912960010),
            name: 'cancel',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1953990034282549854),
            name: 'finish',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 6192037116325498403),
      name: 'Customer',
      lastPropertyId: const IdUid(5, 3090020386679110062),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(2, 897756238628117785),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 7094149867248436284),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1001685769562708279),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3090020386679110062),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(2, 1130095198174930973))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 3885740093415193842),
      name: 'OrderNextButton',
      lastPropertyId: const IdUid(11, 4009770236287666747),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 884935736184302183),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 589923553981987948),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(7, 7968099699081636885)),
        ModelProperty(
            id: const IdUid(3, 1836023034390262135),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4037992427263734469),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3902532852745225948),
            name: 'sort',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2046563212734404928),
            name: 'finish',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 950248480076907380),
            name: 'cancel',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1065756737884964156),
            name: 'waiting',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2800772117691376491),
            name: 'onWay',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4009770236287666747),
            name: 'inTerminal',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 1949976709383216849),
      name: 'WaitingOrderModel',
      lastPropertyId: const IdUid(17, 3169785221312573997),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 868269279235324358),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5178099977464507097),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(9, 6311318010321925875)),
        ModelProperty(
            id: const IdUid(3, 6901417536013603633),
            name: 'to_lat',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1149308492177433937),
            name: 'to_lon',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8808132436442961559),
            name: 'pre_distance',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7334693274384789930),
            name: 'order_number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1506878761545737708),
            name: 'order_price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8451503649275082587),
            name: 'delivery_price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8400788228286204025),
            name: 'delivery_address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2553211143359129527),
            name: 'delivery_comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3434374933585513207),
            name: 'created_at',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7106550158358494055),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 4107127334998577976),
            relationTarget: 'Customer'),
        ModelProperty(
            id: const IdUid(13, 5834073754124692378),
            name: 'terminalId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 1499991988140241428),
            relationTarget: 'Terminals'),
        ModelProperty(
            id: const IdUid(14, 7737347985296494294),
            name: 'orderStatusId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 2319697532974640764),
            relationTarget: 'OrderStatus'),
        ModelProperty(
            id: const IdUid(15, 6854746085406089198),
            name: 'from_lat',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 6097524008689169922),
            name: 'from_lon',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 3169785221312573997),
            name: 'organizationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 5510076716237701865),
            relationTarget: 'Organizations')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 1296200797359606388),
            name: 'orderNextButton',
            targetId: const IdUid(9, 3885740093415193842))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 8076618993551493134),
      name: 'Organizations',
      lastPropertyId: const IdUid(10, 1732659299647189366),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3212550456628815415),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4023538849320669406),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(13, 5249122921441728128)),
        ModelProperty(
            id: const IdUid(3, 2868774649306464763),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3437973949576021472),
            name: 'active',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5068897635430290529),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8157506104009687261),
            name: 'maxDistance',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8885256933266866562),
            name: 'maxActiveOrderCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4395138515048416723),
            name: 'maxOrderCloseDistance',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6037131285445460449),
            name: 'supportChatUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1732659299647189366),
            name: 'iconUrl',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 5349769437952250488),
      name: 'ManagerCouriersModel',
      lastPropertyId: const IdUid(9, 6371879390527856676),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7886582209767772120),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6591988332844142606),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(16, 3707077786157151456)),
        ModelProperty(
            id: const IdUid(3, 4180793703179948086),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 79270462026450625),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7946166619234932682),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5614485167576377256),
            name: 'terminalId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3413557915128308234),
            name: 'terminalName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5468550202241238972),
            name: 'balance',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6371879390527856676),
            name: 'courierId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 2537530572472304200),
      name: 'Couriers',
      lastPropertyId: const IdUid(4, 2300257700537351364),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8469239260230610635),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1272115890219078573),
            name: 'identity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(17, 4429152182772479287)),
        ModelProperty(
            id: const IdUid(3, 705569632956642091),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2300257700537351364),
            name: 'lastName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(13, 2537530572472304200),
      lastIndexId: const IdUid(18, 4634025665218089564),
      lastRelationId: const IdUid(2, 1296200797359606388),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        1863924414234841213,
        8619516910133107737,
        135028551281165955,
        1846751678898275623
      ],
      retiredIndexUids: const [4921986240989773902],
      retiredPropertyUids: const [
        2644272314132256799,
        5195995904683270951,
        5665188339763281843,
        670938261679094489,
        4661653812920702588,
        8247987230190835116,
        4032052936787801220,
        3909389925653241792,
        564995292937529856,
        4052066614249312864,
        2219328941636834940,
        4593010863572601325,
        6801889756641705086,
        4599324437995865890,
        2575838619834289619,
        616016896979766167,
        8551996614833550299,
        6227792049006403338,
        6062476513322378053,
        786840397266920362,
        8266593758222525160,
        2094901791835261984,
        8945765911252574506,
        8107958439781220600,
        6685362917590658499,
        1290841174320871070,
        1643304251919963795,
        6087142303395005860
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    OrderModel: EntityDefinition<OrderModel>(
        model: _entities[0],
        toOneRelations: (OrderModel object) => [
              object.customer,
              object.terminal,
              object.orderStatus,
              object.organization,
              object.courier
            ],
        toManyRelations: (OrderModel object) =>
            {RelInfo<OrderModel>.toMany(1, object.id): object.orderNextButton},
        getId: (OrderModel object) => object.id,
        setId: (OrderModel object, int id) {
          object.id = id;
        },
        objectToFB: (OrderModel object, fb.Builder fbb) {
          final order_numberOffset = fbb.writeString(object.order_number);
          final delivery_addressOffset = object.delivery_address == null
              ? null
              : fbb.writeString(object.delivery_address!);
          final delivery_commentOffset = object.delivery_comment == null
              ? null
              : fbb.writeString(object.delivery_comment!);
          final identityOffset = fbb.writeString(object.identity);
          fbb.startTable(22);
          fbb.addInt64(1, object.id);
          fbb.addFloat64(4, object.to_lat);
          fbb.addFloat64(5, object.to_lon);
          fbb.addOffset(6, order_numberOffset);
          fbb.addInt64(7, object.order_price);
          fbb.addInt64(8, object.delivery_price);
          fbb.addOffset(9, delivery_addressOffset);
          fbb.addOffset(10, delivery_commentOffset);
          fbb.addInt64(11, object.created_at.millisecondsSinceEpoch);
          fbb.addOffset(12, identityOffset);
          fbb.addInt64(13, object.customer.targetId);
          fbb.addInt64(14, object.terminal.targetId);
          fbb.addInt64(15, object.orderStatus.targetId);
          fbb.addInt64(16, object.pre_distance);
          fbb.addFloat64(17, object.from_lat);
          fbb.addFloat64(18, object.from_lon);
          fbb.addInt64(19, object.organization.targetId);
          fbb.addInt64(20, object.courier.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrderModel(
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, ''),
              to_lat:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              to_lon:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0),
              pre_distance:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0),
              order_number: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              order_price:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              delivery_price: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 20),
              delivery_address: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              delivery_comment: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24),
              created_at:
                  DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)),
              from_lat: const fb.Float64Reader().vTableGet(buffer, rootOffset, 38, 0),
              from_lon: const fb.Float64Reader().vTableGet(buffer, rootOffset, 40, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.customer.attach(store);
          object.terminal.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.terminal.attach(store);
          object.orderStatus.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.orderStatus.attach(store);
          object.organization.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          object.organization.attach(store);
          object.courier.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0);
          object.courier.attach(store);
          InternalToManyAccess.setRelInfo(
              object.orderNextButton,
              store,
              RelInfo<OrderModel>.toMany(1, object.id),
              store.box<OrderModel>());
          return object;
        }),
    Terminals: EntityDefinition<Terminals>(
        model: _entities[1],
        toOneRelations: (Terminals object) => [],
        toManyRelations: (Terminals object) => {},
        getId: (Terminals object) => object.id,
        setId: (Terminals object, int id) {
          object.id = id;
        },
        objectToFB: (Terminals object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final identityOffset = fbb.writeString(object.identity);
          fbb.startTable(5);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, identityOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Terminals(
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);

          return object;
        }),
    OrderStatus: EntityDefinition<OrderStatus>(
        model: _entities[2],
        toOneRelations: (OrderStatus object) => [],
        toManyRelations: (OrderStatus object) => {},
        getId: (OrderStatus object) => object.id,
        setId: (OrderStatus object, int id) {
          object.id = id;
        },
        objectToFB: (OrderStatus object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addBool(3, object.cancel);
          fbb.addBool(4, object.finish);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrderStatus(
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              cancel: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              finish: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Customer: EntityDefinition<Customer>(
        model: _entities[3],
        toOneRelations: (Customer object) => [],
        toManyRelations: (Customer object) => {},
        getId: (Customer object) => object.id,
        setId: (Customer object, int id) {
          object.id = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final phoneOffset = fbb.writeString(object.phone);
          final identityOffset = fbb.writeString(object.identity);
          fbb.startTable(6);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, identityOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Customer(
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);

          return object;
        }),
    OrderNextButton: EntityDefinition<OrderNextButton>(
        model: _entities[4],
        toOneRelations: (OrderNextButton object) => [],
        toManyRelations: (OrderNextButton object) => {},
        getId: (OrderNextButton object) => object.id,
        setId: (OrderNextButton object, int id) {
          object.id = id;
        },
        objectToFB: (OrderNextButton object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final nameOffset = fbb.writeString(object.name);
          final colorOffset =
              object.color == null ? null : fbb.writeString(object.color!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, colorOffset);
          fbb.addInt64(4, object.sort);
          fbb.addBool(5, object.finish);
          fbb.addBool(6, object.cancel);
          fbb.addBool(7, object.waiting);
          fbb.addBool(9, object.onWay);
          fbb.addBool(10, object.inTerminal);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrderNextButton(
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              color: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              sort: const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              finish: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              cancel: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false),
              waiting: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              onWay: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 22, false),
              inTerminal: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 24, false))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    WaitingOrderModel: EntityDefinition<WaitingOrderModel>(
        model: _entities[5],
        toOneRelations: (WaitingOrderModel object) => [
              object.customer,
              object.terminal,
              object.orderStatus,
              object.organization
            ],
        toManyRelations: (WaitingOrderModel object) => {
              RelInfo<WaitingOrderModel>.toMany(2, object.id):
                  object.orderNextButton
            },
        getId: (WaitingOrderModel object) => object.id,
        setId: (WaitingOrderModel object, int id) {
          object.id = id;
        },
        objectToFB: (WaitingOrderModel object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final order_numberOffset = fbb.writeString(object.order_number);
          final delivery_addressOffset = object.delivery_address == null
              ? null
              : fbb.writeString(object.delivery_address!);
          final delivery_commentOffset = object.delivery_comment == null
              ? null
              : fbb.writeString(object.delivery_comment!);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addFloat64(2, object.to_lat);
          fbb.addFloat64(3, object.to_lon);
          fbb.addInt64(4, object.pre_distance);
          fbb.addOffset(5, order_numberOffset);
          fbb.addInt64(6, object.order_price);
          fbb.addInt64(7, object.delivery_price);
          fbb.addOffset(8, delivery_addressOffset);
          fbb.addOffset(9, delivery_commentOffset);
          fbb.addInt64(10, object.created_at.millisecondsSinceEpoch);
          fbb.addInt64(11, object.customer.targetId);
          fbb.addInt64(12, object.terminal.targetId);
          fbb.addInt64(13, object.orderStatus.targetId);
          fbb.addFloat64(14, object.from_lat);
          fbb.addFloat64(15, object.from_lon);
          fbb.addInt64(16, object.organization.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = WaitingOrderModel(
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              to_lat:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              to_lon:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              from_lat:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 32, 0),
              from_lon:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 34, 0),
              pre_distance:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              order_number: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              order_price:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              delivery_price: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              delivery_address: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              delivery_comment: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              created_at: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.customer.attach(store);
          object.terminal.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.terminal.attach(store);
          object.orderStatus.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.orderStatus.attach(store);
          object.organization.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.organization.attach(store);
          InternalToManyAccess.setRelInfo(
              object.orderNextButton,
              store,
              RelInfo<WaitingOrderModel>.toMany(2, object.id),
              store.box<WaitingOrderModel>());
          return object;
        }),
    Organizations: EntityDefinition<Organizations>(
        model: _entities[6],
        toOneRelations: (Organizations object) => [],
        toManyRelations: (Organizations object) => {},
        getId: (Organizations object) => object.id,
        setId: (Organizations object, int id) {
          object.id = id;
        },
        objectToFB: (Organizations object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final supportChatUrlOffset = fbb.writeString(object.supportChatUrl);
          final iconUrlOffset =
              object.iconUrl == null ? null : fbb.writeString(object.iconUrl!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addBool(3, object.active);
          fbb.addOffset(4, descriptionOffset);
          fbb.addInt64(5, object.maxDistance);
          fbb.addInt64(6, object.maxActiveOrderCount);
          fbb.addInt64(7, object.maxOrderCloseDistance);
          fbb.addOffset(8, supportChatUrlOffset);
          fbb.addOffset(9, iconUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Organizations(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14),
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16),
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ManagerCouriersModel: EntityDefinition<ManagerCouriersModel>(
        model: _entities[7],
        toOneRelations: (ManagerCouriersModel object) => [],
        toManyRelations: (ManagerCouriersModel object) => {},
        getId: (ManagerCouriersModel object) => object.id,
        setId: (ManagerCouriersModel object, int id) {
          object.id = id;
        },
        objectToFB: (ManagerCouriersModel object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final phoneOffset = fbb.writeString(object.phone);
          final terminalIdOffset = fbb.writeString(object.terminalId);
          final terminalNameOffset = fbb.writeString(object.terminalName);
          final courierIdOffset = fbb.writeString(object.courierId);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(3, lastNameOffset);
          fbb.addOffset(4, phoneOffset);
          fbb.addOffset(5, terminalIdOffset);
          fbb.addOffset(6, terminalNameOffset);
          fbb.addInt64(7, object.balance);
          fbb.addOffset(8, courierIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ManagerCouriersModel(
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              terminalId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              courierId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              terminalName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              balance:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Couriers: EntityDefinition<Couriers>(
        model: _entities[8],
        toOneRelations: (Couriers object) => [],
        toManyRelations: (Couriers object) => {},
        getId: (Couriers object) => object.id,
        setId: (Couriers object, int id) {
          object.id = id;
        },
        objectToFB: (Couriers object, fb.Builder fbb) {
          final identityOffset = fbb.writeString(object.identity);
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identityOffset);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(3, lastNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Couriers(
              identity: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [OrderModel] entity fields to define ObjectBox queries.
class OrderModel_ {
  /// see [OrderModel.id]
  static final id =
      QueryIntegerProperty<OrderModel>(_entities[0].properties[0]);

  /// see [OrderModel.to_lat]
  static final to_lat =
      QueryDoubleProperty<OrderModel>(_entities[0].properties[1]);

  /// see [OrderModel.to_lon]
  static final to_lon =
      QueryDoubleProperty<OrderModel>(_entities[0].properties[2]);

  /// see [OrderModel.order_number]
  static final order_number =
      QueryStringProperty<OrderModel>(_entities[0].properties[3]);

  /// see [OrderModel.order_price]
  static final order_price =
      QueryIntegerProperty<OrderModel>(_entities[0].properties[4]);

  /// see [OrderModel.delivery_price]
  static final delivery_price =
      QueryIntegerProperty<OrderModel>(_entities[0].properties[5]);

  /// see [OrderModel.delivery_address]
  static final delivery_address =
      QueryStringProperty<OrderModel>(_entities[0].properties[6]);

  /// see [OrderModel.delivery_comment]
  static final delivery_comment =
      QueryStringProperty<OrderModel>(_entities[0].properties[7]);

  /// see [OrderModel.created_at]
  static final created_at =
      QueryIntegerProperty<OrderModel>(_entities[0].properties[8]);

  /// see [OrderModel.identity]
  static final identity =
      QueryStringProperty<OrderModel>(_entities[0].properties[9]);

  /// see [OrderModel.customer]
  static final customer =
      QueryRelationToOne<OrderModel, Customer>(_entities[0].properties[10]);

  /// see [OrderModel.terminal]
  static final terminal =
      QueryRelationToOne<OrderModel, Terminals>(_entities[0].properties[11]);

  /// see [OrderModel.orderStatus]
  static final orderStatus =
      QueryRelationToOne<OrderModel, OrderStatus>(_entities[0].properties[12]);

  /// see [OrderModel.pre_distance]
  static final pre_distance =
      QueryIntegerProperty<OrderModel>(_entities[0].properties[13]);

  /// see [OrderModel.from_lat]
  static final from_lat =
      QueryDoubleProperty<OrderModel>(_entities[0].properties[14]);

  /// see [OrderModel.from_lon]
  static final from_lon =
      QueryDoubleProperty<OrderModel>(_entities[0].properties[15]);

  /// see [OrderModel.organization]
  static final organization = QueryRelationToOne<OrderModel, Organizations>(
      _entities[0].properties[16]);

  /// see [OrderModel.courier]
  static final courier =
      QueryRelationToOne<OrderModel, Couriers>(_entities[0].properties[17]);

  /// see [OrderModel.orderNextButton]
  static final orderNextButton =
      QueryRelationToMany<OrderModel, OrderNextButton>(
          _entities[0].relations[0]);
}

/// [Terminals] entity fields to define ObjectBox queries.
class Terminals_ {
  /// see [Terminals.id]
  static final id = QueryIntegerProperty<Terminals>(_entities[1].properties[0]);

  /// see [Terminals.name]
  static final name =
      QueryStringProperty<Terminals>(_entities[1].properties[1]);

  /// see [Terminals.identity]
  static final identity =
      QueryStringProperty<Terminals>(_entities[1].properties[2]);
}

/// [OrderStatus] entity fields to define ObjectBox queries.
class OrderStatus_ {
  /// see [OrderStatus.id]
  static final id =
      QueryIntegerProperty<OrderStatus>(_entities[2].properties[0]);

  /// see [OrderStatus.identity]
  static final identity =
      QueryStringProperty<OrderStatus>(_entities[2].properties[1]);

  /// see [OrderStatus.name]
  static final name =
      QueryStringProperty<OrderStatus>(_entities[2].properties[2]);

  /// see [OrderStatus.cancel]
  static final cancel =
      QueryBooleanProperty<OrderStatus>(_entities[2].properties[3]);

  /// see [OrderStatus.finish]
  static final finish =
      QueryBooleanProperty<OrderStatus>(_entities[2].properties[4]);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.id]
  static final id = QueryIntegerProperty<Customer>(_entities[3].properties[0]);

  /// see [Customer.name]
  static final name = QueryStringProperty<Customer>(_entities[3].properties[1]);

  /// see [Customer.phone]
  static final phone =
      QueryStringProperty<Customer>(_entities[3].properties[2]);

  /// see [Customer.identity]
  static final identity =
      QueryStringProperty<Customer>(_entities[3].properties[3]);
}

/// [OrderNextButton] entity fields to define ObjectBox queries.
class OrderNextButton_ {
  /// see [OrderNextButton.id]
  static final id =
      QueryIntegerProperty<OrderNextButton>(_entities[4].properties[0]);

  /// see [OrderNextButton.identity]
  static final identity =
      QueryStringProperty<OrderNextButton>(_entities[4].properties[1]);

  /// see [OrderNextButton.name]
  static final name =
      QueryStringProperty<OrderNextButton>(_entities[4].properties[2]);

  /// see [OrderNextButton.color]
  static final color =
      QueryStringProperty<OrderNextButton>(_entities[4].properties[3]);

  /// see [OrderNextButton.sort]
  static final sort =
      QueryIntegerProperty<OrderNextButton>(_entities[4].properties[4]);

  /// see [OrderNextButton.finish]
  static final finish =
      QueryBooleanProperty<OrderNextButton>(_entities[4].properties[5]);

  /// see [OrderNextButton.cancel]
  static final cancel =
      QueryBooleanProperty<OrderNextButton>(_entities[4].properties[6]);

  /// see [OrderNextButton.waiting]
  static final waiting =
      QueryBooleanProperty<OrderNextButton>(_entities[4].properties[7]);

  /// see [OrderNextButton.onWay]
  static final onWay =
      QueryBooleanProperty<OrderNextButton>(_entities[4].properties[8]);

  /// see [OrderNextButton.inTerminal]
  static final inTerminal =
      QueryBooleanProperty<OrderNextButton>(_entities[4].properties[9]);
}

/// [WaitingOrderModel] entity fields to define ObjectBox queries.
class WaitingOrderModel_ {
  /// see [WaitingOrderModel.id]
  static final id =
      QueryIntegerProperty<WaitingOrderModel>(_entities[5].properties[0]);

  /// see [WaitingOrderModel.identity]
  static final identity =
      QueryStringProperty<WaitingOrderModel>(_entities[5].properties[1]);

  /// see [WaitingOrderModel.to_lat]
  static final to_lat =
      QueryDoubleProperty<WaitingOrderModel>(_entities[5].properties[2]);

  /// see [WaitingOrderModel.to_lon]
  static final to_lon =
      QueryDoubleProperty<WaitingOrderModel>(_entities[5].properties[3]);

  /// see [WaitingOrderModel.pre_distance]
  static final pre_distance =
      QueryIntegerProperty<WaitingOrderModel>(_entities[5].properties[4]);

  /// see [WaitingOrderModel.order_number]
  static final order_number =
      QueryStringProperty<WaitingOrderModel>(_entities[5].properties[5]);

  /// see [WaitingOrderModel.order_price]
  static final order_price =
      QueryIntegerProperty<WaitingOrderModel>(_entities[5].properties[6]);

  /// see [WaitingOrderModel.delivery_price]
  static final delivery_price =
      QueryIntegerProperty<WaitingOrderModel>(_entities[5].properties[7]);

  /// see [WaitingOrderModel.delivery_address]
  static final delivery_address =
      QueryStringProperty<WaitingOrderModel>(_entities[5].properties[8]);

  /// see [WaitingOrderModel.delivery_comment]
  static final delivery_comment =
      QueryStringProperty<WaitingOrderModel>(_entities[5].properties[9]);

  /// see [WaitingOrderModel.created_at]
  static final created_at =
      QueryIntegerProperty<WaitingOrderModel>(_entities[5].properties[10]);

  /// see [WaitingOrderModel.customer]
  static final customer = QueryRelationToOne<WaitingOrderModel, Customer>(
      _entities[5].properties[11]);

  /// see [WaitingOrderModel.terminal]
  static final terminal = QueryRelationToOne<WaitingOrderModel, Terminals>(
      _entities[5].properties[12]);

  /// see [WaitingOrderModel.orderStatus]
  static final orderStatus = QueryRelationToOne<WaitingOrderModel, OrderStatus>(
      _entities[5].properties[13]);

  /// see [WaitingOrderModel.from_lat]
  static final from_lat =
      QueryDoubleProperty<WaitingOrderModel>(_entities[5].properties[14]);

  /// see [WaitingOrderModel.from_lon]
  static final from_lon =
      QueryDoubleProperty<WaitingOrderModel>(_entities[5].properties[15]);

  /// see [WaitingOrderModel.organization]
  static final organization =
      QueryRelationToOne<WaitingOrderModel, Organizations>(
          _entities[5].properties[16]);

  /// see [WaitingOrderModel.orderNextButton]
  static final orderNextButton =
      QueryRelationToMany<WaitingOrderModel, OrderNextButton>(
          _entities[5].relations[0]);
}

/// [Organizations] entity fields to define ObjectBox queries.
class Organizations_ {
  /// see [Organizations.id]
  static final id =
      QueryIntegerProperty<Organizations>(_entities[6].properties[0]);

  /// see [Organizations.identity]
  static final identity =
      QueryStringProperty<Organizations>(_entities[6].properties[1]);

  /// see [Organizations.name]
  static final name =
      QueryStringProperty<Organizations>(_entities[6].properties[2]);

  /// see [Organizations.active]
  static final active =
      QueryBooleanProperty<Organizations>(_entities[6].properties[3]);

  /// see [Organizations.description]
  static final description =
      QueryStringProperty<Organizations>(_entities[6].properties[4]);

  /// see [Organizations.maxDistance]
  static final maxDistance =
      QueryIntegerProperty<Organizations>(_entities[6].properties[5]);

  /// see [Organizations.maxActiveOrderCount]
  static final maxActiveOrderCount =
      QueryIntegerProperty<Organizations>(_entities[6].properties[6]);

  /// see [Organizations.maxOrderCloseDistance]
  static final maxOrderCloseDistance =
      QueryIntegerProperty<Organizations>(_entities[6].properties[7]);

  /// see [Organizations.supportChatUrl]
  static final supportChatUrl =
      QueryStringProperty<Organizations>(_entities[6].properties[8]);

  /// see [Organizations.iconUrl]
  static final iconUrl =
      QueryStringProperty<Organizations>(_entities[6].properties[9]);
}

/// [ManagerCouriersModel] entity fields to define ObjectBox queries.
class ManagerCouriersModel_ {
  /// see [ManagerCouriersModel.id]
  static final id =
      QueryIntegerProperty<ManagerCouriersModel>(_entities[7].properties[0]);

  /// see [ManagerCouriersModel.identity]
  static final identity =
      QueryStringProperty<ManagerCouriersModel>(_entities[7].properties[1]);

  /// see [ManagerCouriersModel.firstName]
  static final firstName =
      QueryStringProperty<ManagerCouriersModel>(_entities[7].properties[2]);

  /// see [ManagerCouriersModel.lastName]
  static final lastName =
      QueryStringProperty<ManagerCouriersModel>(_entities[7].properties[3]);

  /// see [ManagerCouriersModel.phone]
  static final phone =
      QueryStringProperty<ManagerCouriersModel>(_entities[7].properties[4]);

  /// see [ManagerCouriersModel.terminalId]
  static final terminalId =
      QueryStringProperty<ManagerCouriersModel>(_entities[7].properties[5]);

  /// see [ManagerCouriersModel.terminalName]
  static final terminalName =
      QueryStringProperty<ManagerCouriersModel>(_entities[7].properties[6]);

  /// see [ManagerCouriersModel.balance]
  static final balance =
      QueryIntegerProperty<ManagerCouriersModel>(_entities[7].properties[7]);

  /// see [ManagerCouriersModel.courierId]
  static final courierId =
      QueryStringProperty<ManagerCouriersModel>(_entities[7].properties[8]);
}

/// [Couriers] entity fields to define ObjectBox queries.
class Couriers_ {
  /// see [Couriers.id]
  static final id = QueryIntegerProperty<Couriers>(_entities[8].properties[0]);

  /// see [Couriers.identity]
  static final identity =
      QueryStringProperty<Couriers>(_entities[8].properties[1]);

  /// see [Couriers.firstName]
  static final firstName =
      QueryStringProperty<Couriers>(_entities[8].properties[2]);

  /// see [Couriers.lastName]
  static final lastName =
      QueryStringProperty<Couriers>(_entities[8].properties[3]);
}
